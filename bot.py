
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import os

API_TOKEN = '6702986171:AAHqocEsxrFB2MoNG_djIray2DQ7gtpmXOk'
ADMIN_USERNAME = '@Sergey_PIatonov'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class ReviewStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üêæ –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
    await ReviewStates.waiting_for_text.set()

@dp.message_handler(state=ReviewStates.waiting_for_text, content_types=types.ContentTypes.TEXT)
async def process_text(message: types.Message, state: FSMContext):
    await state.update_data(review_text=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–æ–≤–∞—Ä–æ–º üê∂")
    await ReviewStates.waiting_for_photo.set()

@dp.message_handler(state=ReviewStates.waiting_for_photo, content_types=types.ContentTypes.PHOTO)
async def process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    review_text = data['review_text']

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
    sender = message.from_user.username or message.from_user.id
    await bot.send_message(ADMIN_USERNAME, f"üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{sender}:

{review_text}")
    await message.photo[-1].send_copy(ADMIN_USERNAME)

    # –í—ã–¥–∞—ë–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = get_next_promo_code()
    if promo_code:
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–∫–∞–∑–µ.")
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ.")

    await state.finish()

def get_next_promo_code():
    try:
        with open("promo_codes.txt", "r") as f:
            codes = f.read().splitlines()
        if not codes:
            return None
        promo = codes[0]
        with open("promo_codes.txt", "w") as f:
            f.write("\n".join(codes[1:]))
        return promo
    except:
        return None

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
